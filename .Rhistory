raw <- as_tibble(raw)
# Delete duplicates
raw <- raw %>% distinct(time, .keep_all = TRUE)
# Drop NAs
raw <- na.omit(raw)
# Rename column names in raw data set
names(raw)[1] <- "id"
names(raw)[2] <- "timepoint"
# Merge patient information and sepsis labels
raw_master_full <- merge(raw_master, raw_master_label, by = c("pmid"), all.x = TRUE, all.y = TRUE)
raw_master_full <- raw_master_full[raw_master_full$pmid %in% raw$id, ]
levels(raw_master_full$label) <- c(levels(raw_master_full$label), "NoLabel")
raw_master_full[is.na(raw_master_full)] <- "NoLabel"
raw_master_full <- as_tibble(raw_master_full)
# Add the sepsis label as "treatment"
raw$treatment <- NA
raw$treatment <- as.factor(raw$treatment)
levels(raw$treatment) <- levels(raw_master_full$label)
for (l in 1:nrow(raw)) {
label <- raw_master_full$label[raw_master_full$pmid == as.character(raw$id[l])]
raw$treatment[l] <- as.factor(label)
}
# Add the sex as "condition"
raw$condition <- NA
raw$condition <- as.factor(raw$condition)
levels(raw$condition) <- levels(raw_master_full$sex)
for (l in 1:nrow(raw)) {
sex <- raw_master_full$sex[raw_master_full$pmid == as.character(raw$id[l])]
raw$condition[l] <- as.factor(sex)
}
raw
# Deletion of unrealistic entries
raw2 <- raw %>%
filter(systolicbp > 0 | is.na(systolicbp)) %>%
filter(map > 0 | is.na(map)) %>%
filter(temperature > 30 | is.na(temperature)) %>%
filter(map < systolicbp)
raw2
#'
#' hRELSA:
#' A translational approach to quantify a patientâ€™s disease severity in real-time
#'
#' R file to reproduce the data and figures
#'
# Libraries ---------------------------------------------------------------
# Prior a installation of each package is needed
library(hRELSA)
library(tidyverse)
library(janitor)
library(readxl)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(lme4)
library(lmerTest)
library(psych)
library(lubridate)
library(car)
library(lsr)
# Data setup -------------------------------------------------------------
# Blood pressure
raw_bp <- read.csv("data/Blood_pressure_invasive.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_bp <- as_tibble(raw_bp)
names(raw_bp)[1] <- "pmid"
names(raw_bp)[2] <- "time"
names(raw_bp)[3] <- "systolicbp"
names(raw_bp)[4] <- "diastolicbp"
names(raw_bp)[5] <- "map"
raw_bp <- raw_bp %>%
clean_names %>%
select("pmid", "time", "systolicbp", "diastolicbp", "map") %>%
mutate(
time = as.POSIXct(time, tz = ""),
systolicbp = as.double(systolicbp),
diastolicbp = as.double(diastolicbp),
map = as.double(map),
)
# Body temperature
raw_temp <- read.csv("data/Body_temperature.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_temp <- as_tibble(raw_temp)
names(raw_temp)[1] <- "pmid"
names(raw_temp)[2] <- "time"
names(raw_temp)[3] <- "temperature"
raw_temp <- raw_temp %>%
clean_names %>%
select("pmid", "time", "temperature") %>%
mutate(
time = as.POSIXct(time, tz = ""),
temperature = as.double(temperature)
)
# Heart rate
raw_hr <- read.csv("data/Heart_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_hr <- as_tibble(raw_hr)
names(raw_hr)[1] <- "pmid"
names(raw_hr)[2] <- "time"
names(raw_hr)[3] <- "hr"
raw_hr <- raw_hr %>%
clean_names %>%
select("pmid", "time", "hr") %>%
mutate(
time = as.POSIXct(time, tz = ""),
hr = as.double(hr)
)
# Patient information
raw_master <- read.csv("data/Patient_master_data.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_master <- as_tibble(raw_master)
raw_master <- raw_master %>%
clean_names %>%
mutate(
pmid = as.factor(pmid),
date_of_birth = as.Date(date_of_birth),
sex = as.factor(sex)
)
# Patient information with sepsis labels
raw_master_label <- read.csv("data/Patient_master_data_label.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_master_label <- as_tibble(raw_master_label)
raw_master_label <- raw_master_label %>%
clean_names %>%
mutate(
pmid = as.factor(pmid),
discharge = as.Date(discharge),
admission = as.Date(admission),
label = as.factor(label)
)
# Pulse
raw_pulse <- read.csv("data/Pulse.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_pulse <- as_tibble(raw_pulse)
names(raw_pulse)[2] <- "time"
names(raw_pulse)[3] <- "pulse"
raw_pulse <- raw_pulse %>%
clean_names %>%
select("pmid", "time", "pulse") %>%
mutate(
time = as.POSIXct(time, tz = ""),
pulse = as.double(pulse)
)
# Respiratory Rate
raw_resp <- read.csv("data/Respiratory_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_resp <- as_tibble(raw_resp)
names(raw_resp)[2] <- "time"
names(raw_resp)[3] <- "rr"
raw_resp <- raw_resp %>%
clean_names %>%
select("pmid", "time", "rr") %>%
mutate(
time = as.POSIXct(time, tz = ""),
rr = as.double(rr)
)
# Oxygen saturation
raw_tom <- read.csv("data/Transcutaneous_oxygen_measurement.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_tom <- as_tibble(raw_tom)
names(raw_tom)[2] <- "time"
names(raw_tom)[3] <- "sao2"
raw_tom <- raw_tom %>%
clean_names %>%
select("pmid", "time", "sao2") %>%
mutate(
time = as.POSIXct(time, tz = ""),
sao2 = as.double(sao2)
)
# Merge all data sets into one final data set
raw <- NULL
raw <- merge(raw_hr, raw_pulse, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_tom, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_resp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_bp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_temp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- as_tibble(raw)
# Delete duplicates
raw <- raw %>% distinct(time, .keep_all = TRUE)
# Rename column names in raw data set
names(raw)[1] <- "id"
names(raw)[2] <- "timepoint"
# Merge patient information and sepsis labels
raw_master_full <- merge(raw_master, raw_master_label, by = c("pmid"), all.x = TRUE, all.y = TRUE)
raw_master_full <- raw_master_full[raw_master_full$pmid %in% raw$id, ]
levels(raw_master_full$label) <- c(levels(raw_master_full$label), "NoLabel")
raw_master_full[is.na(raw_master_full)] <- "NoLabel"
raw_master_full <- as_tibble(raw_master_full)
# Add the sepsis label as "treatment"
raw$treatment <- NA
raw$treatment <- as.factor(raw$treatment)
levels(raw$treatment) <- levels(raw_master_full$label)
for (l in 1:nrow(raw)) {
label <- raw_master_full$label[raw_master_full$pmid == as.character(raw$id[l])]
raw$treatment[l] <- as.factor(label)
}
# Add the sex as "condition"
raw$condition <- NA
raw$condition <- as.factor(raw$condition)
levels(raw$condition) <- levels(raw_master_full$sex)
for (l in 1:nrow(raw)) {
sex <- raw_master_full$sex[raw_master_full$pmid == as.character(raw$id[l])]
raw$condition[l] <- as.factor(sex)
}
raw
# Drop NAs
raw <- na.omit(raw)
raw
arrange(raw, rr)
which_id <- "101137"
which_patient <- 70
which_time <- "498480"
time_in_days <- (as.numeric(which_time))/((60*60)*24)
dat %>% filter(id == which_id, time == which_time)
final  %>% filter(id == which_id, time == which_time)
arrange(raw, rr)
arrange(raw, temperature)
arrange(raw, sao2)
arrange(raw, rr)
arrange(raw, desc(hr))
arrange(raw, desc(rr))
analysis
raw
raw <- raw %>%
mutate(
systolicbp = ifelse(systolicbp > 0, systolicbp, NA),
map = ifelse(map > 0, map, NA),
rr = ifelse(rr > 0, rr, NA),
temperature = ifelse(temperature > 34, temperature, NA),
map = ifelse(map < systolicbp, map, NA)
)
raw
arrange(raw, rr)
arrange(raw, desc(rr))
# Select the variables to use the hRELSA with
vars <- c("hr", "sao2", "rr", "map", "temperature")
turnvars <- NULL
ambivars <- c("hr", "rr", "map", "temperature")
zvars <- NULL
dropvars <- NULL
# Get reference values
raw_norm <- read_excel("data/reference_values.xlsx", sheet = 1)
# Deletion of pulse
raw_norm <- raw_norm %>% select("age", all_of(vars))
# Generate day column
raw <- hrelsa_days(raw, format = "timecode", formthis = "timepoint", newdayone = TRUE)
# Write raw in a csv
write.csv(raw, file = "data/raw.csv")
# Format the data
dat <- hrelsa_format(raw, id = "id", time = "time", treatment = "treatment", condition = "condition", vars = vars, included_realtime = "timepoint")
# Write dat in a csv
write.csv(dat, file = "data/dat.csv")
# Fetch data for maximal severity evaluation
reference_dat <- dat %>% filter(treatment == "NoSepsis")
bsl <- hrelsa_adaptive_baselines(dat, reference_dat, vars = vars, turnvars = turnvars, ambivars = ambivars, realtime = "timepoint",
dob_dat = raw_master_full, dob_data_id_col = 1, dob_data_dob_col = 3,
norm_dat = raw_norm, norm_dat_names = names(raw_norm))
pre <- bsl$pre
age_pre <- bsl$age_pre
# Write pre in a csv
write.csv(pre, file = "data/pre.csv")
# Generate final data
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, ambivars = ambivars, zvars = zvars)
# Write final in a csv
#write.csv(final, file = "data/final.csv")
# Generate some analysis
analysis <- hrelsa_analysis(final)
analysis
arrange(dat, temperature)
bsl
raw_master_full
# raw
write.csv(raw, file = "data/raw.csv")
#raw_master_full
write.csv(raw_master_full, file = "data/raw_master_full.csv")
# raw
write.csv(raw, file = "output/raw.csv")
#raw_master_full
write.csv(raw_master_full, file = "output/raw_master_full.csv")
raw <- read_csv("output/raw.csv")
raw <- read_excel("output/raw.csv")
raw <- read_csv2("output/raw.csv")
raw
raw <- read.csv("output/raw.csv")
raw
raw <- as_tibble(read.csv("output/raw.csv"))
raw
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
raw
raw_master_full <- as_tibble(read.csv("output/raw_master_full.csv")[,-1])
raw_master_full
raw
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
double_vars <- c("hr", "pulse", "sao2", "rr", "systolicbp", "diastolicbp", "map", "temperature")
raw <- raw %>% mutate(
timepoint = as.POSIXct(time, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_cars), as.factor))
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_cars), as.factor))
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.factor))
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.double))
raw
raw_master_full
# Libraries ---------------------------------------------------------------
# Prior a installation of each package is needed
library(hRELSA)
library(tidyverse)
library(janitor)
library(readxl)
# Data setup -------------------------------------------------------------
# Blood pressure
raw_bp <- read.csv("data/Blood_pressure_invasive.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_bp <- as_tibble(raw_bp)
names(raw_bp)[1] <- "pmid"
names(raw_bp)[2] <- "time"
names(raw_bp)[3] <- "systolicbp"
names(raw_bp)[4] <- "diastolicbp"
names(raw_bp)[5] <- "map"
raw_bp <- raw_bp %>%
clean_names %>%
select("pmid", "time", "systolicbp", "diastolicbp", "map") %>%
mutate(
time = as.POSIXct(time, tz = ""),
systolicbp = as.double(systolicbp),
diastolicbp = as.double(diastolicbp),
map = as.double(map),
)
# Body temperature
raw_temp <- read.csv("data/Body_temperature.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_temp <- as_tibble(raw_temp)
names(raw_temp)[1] <- "pmid"
names(raw_temp)[2] <- "time"
names(raw_temp)[3] <- "temperature"
raw_temp <- raw_temp %>%
clean_names %>%
select("pmid", "time", "temperature") %>%
mutate(
time = as.POSIXct(time, tz = ""),
temperature = as.double(temperature)
)
# Heart rate
raw_hr <- read.csv("data/Heart_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_hr <- as_tibble(raw_hr)
names(raw_hr)[1] <- "pmid"
names(raw_hr)[2] <- "time"
names(raw_hr)[3] <- "hr"
raw_hr <- raw_hr %>%
clean_names %>%
select("pmid", "time", "hr") %>%
mutate(
time = as.POSIXct(time, tz = ""),
hr = as.double(hr)
)
# Patient information
raw_master <- read.csv("data/Patient_master_data.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_master <- as_tibble(raw_master)
raw_master <- raw_master %>%
clean_names %>%
mutate(
pmid = as.factor(pmid),
date_of_birth = as.Date(date_of_birth),
sex = as.factor(sex)
)
# Patient information with sepsis labels
raw_master_label <- read.csv("data/Patient_master_data_label.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_master_label <- as_tibble(raw_master_label)
raw_master_label <- raw_master_label %>%
clean_names %>%
mutate(
pmid = as.factor(pmid),
discharge = as.Date(discharge),
admission = as.Date(admission),
label = as.factor(label)
)
# Pulse
raw_pulse <- read.csv("data/Pulse.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_pulse <- as_tibble(raw_pulse)
names(raw_pulse)[2] <- "time"
names(raw_pulse)[3] <- "pulse"
raw_pulse <- raw_pulse %>%
clean_names %>%
select("pmid", "time", "pulse") %>%
mutate(
time = as.POSIXct(time, tz = ""),
pulse = as.double(pulse)
)
# Respiratory Rate
raw_resp <- read.csv("data/Respiratory_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_resp <- as_tibble(raw_resp)
names(raw_resp)[2] <- "time"
names(raw_resp)[3] <- "rr"
raw_resp <- raw_resp %>%
clean_names %>%
select("pmid", "time", "rr") %>%
mutate(
time = as.POSIXct(time, tz = ""),
rr = as.double(rr)
)
# Oxygen saturation
raw_tom <- read.csv("data/Transcutaneous_oxygen_measurement.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_tom <- as_tibble(raw_tom)
names(raw_tom)[2] <- "time"
names(raw_tom)[3] <- "sao2"
raw_tom <- raw_tom %>%
clean_names %>%
select("pmid", "time", "sao2") %>%
mutate(
time = as.POSIXct(time, tz = ""),
sao2 = as.double(sao2)
)
# Merge all data sets into one final data set
raw <- NULL
raw <- merge(raw_hr, raw_pulse, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_tom, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_resp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_bp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_temp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- as_tibble(raw)
# Delete duplicates
raw <- raw %>% distinct(time, .keep_all = TRUE)
# Drop NAs
raw <- na.omit(raw)
# Rename column names in raw data set
names(raw)[1] <- "id"
names(raw)[2] <- "timepoint"
# Merge patient information and sepsis labels
raw_master_full <- merge(raw_master, raw_master_label, by = c("pmid"), all.x = TRUE, all.y = TRUE)
raw_master_full <- raw_master_full[raw_master_full$pmid %in% raw$id, ]
levels(raw_master_full$label) <- c(levels(raw_master_full$label), "NoLabel")
raw_master_full[is.na(raw_master_full)] <- "NoLabel"
raw_master_full <- as_tibble(raw_master_full)
# Add the sepsis label as "treatment"
raw$treatment <- NA
raw$treatment <- as.factor(raw$treatment)
levels(raw$treatment) <- levels(raw_master_full$label)
for (l in 1:nrow(raw)) {
label <- raw_master_full$label[raw_master_full$pmid == as.character(raw$id[l])]
raw$treatment[l] <- as.factor(label)
}
# Add the sex as "condition"
raw$condition <- NA
raw$condition <- as.factor(raw$condition)
levels(raw$condition) <- levels(raw_master_full$sex)
for (l in 1:nrow(raw)) {
sex <- raw_master_full$sex[raw_master_full$pmid == as.character(raw$id[l])]
raw$condition[l] <- as.factor(sex)
}
# Deletion of unrealistic entries
raw <- raw %>%
mutate(
systolicbp = ifelse(systolicbp > 0, systolicbp, NA),
map = ifelse(map > 0, map, NA),
rr = ifelse(rr > 0, rr, NA),
temperature = ifelse(temperature > 34, temperature, NA),
map = ifelse(map < systolicbp, map, NA)
)
raw_master_full
raw
# raw
write.csv(raw, file = "output/raw.csv")
#raw_master_full
write.csv(raw_master_full, file = "output/raw_master_full.csv")
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
double_vars <- c("hr", "pulse", "sao2", "rr", "systolicbp", "diastolicbp", "map", "temperature")
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.double))
raw_master_full <- as_tibble(read.csv("output/raw_master_full.csv")[,-1])
raw_master_full <- raw_master_full %>% mutate(
pmid = as.factor(pmid),
sex = as.factor(sex),
date_of_birth = as.Date(date_of_birth),
date_of_die = as.Date(date_of_die),
admission = as.Date(admission),
discharge = as.Date(discharge),
label = as.factor(label)
)
raw_master_full
raw_master_full <- raw_master_full %>% mutate(
pmid = as.factor(pmid),
sex = as.factor(sex),
date_of_birth = as.Date(date_of_birth),
#date_of_die = as.Date(date_of_die),
admission = as.Date(admission),
discharge = as.Date(discharge),
label = as.factor(label)
)
raw_master_full
# Write dat in a csv
write.csv(dat, file = "output/dat.csv")
# Write pre in a csv
write.csv(pre, file = "output/pre.csv")
install.packages("hRELSA", "tidyverse", "janitor", "readxl", "ggplot2", "patchwork",
"ggsignif", "lme4", "lmerTest", "psych", "lubridate", "car", "lsr")
install.packages("hRELSA", "tidyverse", "janitor", "readxl", "ggplot2", "patchwork", "ggsignif", "lme4", "lmerTest", "psych", "lubridate", "car", "lsr")
install.packages(c("hRELSA", "tidyverse", "janitor", "readxl", "ggplot2", "patchwork",
"ggsignif", "lme4", "lmerTest", "psych", "lubridate", "car", "lsr"))
install.packages(c("hRELSA", "tidyverse", "janitor", "readxl", "ggplot2", "patchwork", "ggsignif", "lme4", "lmerTest", "psych", "lubridate", "car", "lsr"))
sessionInfo()
package.dependencies()
?lm
