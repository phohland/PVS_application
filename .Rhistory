)
cohensD(pvs ~ type, data = curve00_noprov)
## Suspected Sepsis
sus_ids <- unique(final$id[final$sus_sepsis == TRUE])
curve <- final
curve$treatment <- NULL
curve$treatment <- "NoSuspectedSepsis"
curve$treatment[curve$id %in% sus_ids] <- "SuspectedSepsis"
curve <- curve %>% mutate(
treatment = factor(treatment,
levels = c("NoSuspectedSepsis", "SuspectedSepsis"),
labels = c("No Suspected Sepsis", "Suspected Sepsis"))
)
max_pvs <- aggregate(rms$rms ~ id, curve, max)
last_pvs <- aggregate(rms$rms ~ id, curve, tail, n = 1)
curve0 <- merge(max_pvs, last_pvs, by = "id")
curve0$treatment <- curve$treatment[match(curve0$id, curve$id)]
colnames(curve0) <- c("id", "max_pvs", "last_pvs", "treatment")
curve00 <- data.frame(
id = rep(curve0$id, times = 2),
pvs = c(curve0$max_pvs, curve0$last_pvs),
type = rep(c("max", "last"), each = nrow(curve0)),
treatment = rep(curve0$treatment, times = 2)
)
curve00 <- as_tibble(curve00)
curve00$type <- factor(curve00$type, levels = c("max", "last"))
# Figure
pm3 <- curve00 %>%
ggplot(aes(x = treatment, y = pvs, color = type)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(),
size = 3,
alpha = 0.75) +
geom_hline(yintercept = 1, linetype = "dashed") +
# geom_signif(
#   comparisons = list(c("max", "last")),
#   map_signif_level = TRUE,
#   color = c("#000000"),
#   textsize = 5,
#   annotation = "****"
# ) +
labs (x = "", y = "PVS", color = "PVS type") +
theme_classic() +
theme(
legend.position = "top",
axis.text = element_text(size = 13),
axis.title = element_text(size = 18, face = "bold")
) +
scale_color_manual(values = c("max" = "#FF7F0E", "last" = "#1F77B4"))
pm3
### Statistics
#Suspected Spesis
curve00_sus <- curve00[curve00$treatment == "Suspected Sepsis", ]
describeBy(curve00_sus$pvs, curve00_sus$type)
leveneTest(curve00_sus$pvs, curve00_sus$type)  # Same VAR
z.test(
x = curve00_sus$pvs[curve00_sus$type == "max"],
y = curve00_sus$pvs[curve00_sus$type == "last"],
sigma.x = sd(curve00_sus$pvs[curve00_sus$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_sus$pvs[curve00_sus$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_sus)
# No Suspected Sepsis
curve00_nosus <- curve00[curve00$treatment == "No Suspected Sepsis", ]
describeBy(curve00_nosus$pvs, curve00_nosus$type)
leveneTest(curve00_nosus$pvs, curve00_nosus$type)  # No Same VAR
z.test(
x = curve00_nosus$pvs[curve00_nosus$type == "max"],
y = curve00_nosus$pvs[curve00_nosus$type == "last"],
sigma.x = sd(curve00_nosus$pvs[curve00_nosus$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_nosus$pvs[curve00_nosus$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_nosus)
# Panel Plot ###
maxlast <- pm1 +  pm2 + pm3
maxlast <- maxlast + plot_layout(ncol = 3)
maxlast
ggsave(
"figs/figure8.tiff",
plot = maxlast,
dpi = 300,
width = 14,
height = 7,
units = "in",
compression = "lzw"
)
#Variables
summary(dat$hr)
#Labels
proven_sepsis_ids
# Libraries ---------------------------------------------------------------
# Prior a installation of each package is needed:
install.packages(
c(
"hRELSA",
"tidyverse",
"janitor",
"readxl",
"ggplot2",
"patchwork",
"ggsignif",
"psych",
"car",
"lsr",
"BSDA"
)
)
library(hRELSA)
library(tidyverse)
library(janitor)
library(readxl)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(psych) # for describeBy and cor
library(car) # for leveneTest
library(lsr) # for cohensD
library(BSDA) # for z.test
# Data setup -------------------------------------------------------------
# The used raw data can be found in the output folder. The data_setup.R shows,
# how it was created. Here they just get fetched.
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
double_vars <-
c("hr",
"pulse",
"sao2",
"rr",
"systolicbp",
"diastolicbp",
"map",
"temperature")
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.double))
raw_master_full <-
as_tibble(read.csv("output/raw_master_full.csv")[,-1])
raw_master_full <- raw_master_full %>% mutate(
pmid = as.factor(pmid),
sex = as.factor(sex),
date_of_birth = as.Date(date_of_birth),
#date_of_die = as.Date(date_of_die),
admission = as.Date(admission),
discharge = as.Date(discharge),
label = as.factor(label)
)
# hRELSA  -----------------------------------------------------------------
# Select the variables to use the hRELSA with
vars <- c("hr", "sao2", "rr", "map", "temperature")
turnvars <- NULL
ambivars <- c("hr", "rr", "map", "temperature")
zvars <- NULL
dropvars <- NULL
# Get reference values
raw_norm <- read_excel("data/reference_values.xlsx", sheet = 1)
# Deletion of pulse
raw_norm <- raw_norm %>% select("age", all_of(vars))
# Generate day column
raw <-
hrelsa_days(raw,
format = "timecode",
formthis = "timepoint",
newdayone = TRUE)
# Format the data
dat <-
hrelsa_format(
raw,
id = "id",
time = "time",
treatment = "treatment",
condition = "condition",
vars = vars,
included_realtime = "timepoint"
)
# Write dat in a csv
write.csv(dat, file = "output/dat.csv")
# Fetch data for maximal severity evaluation
sirs_ids <- unique(final$id[final$sirs == TRUE])
ref <- dat
ref$treatment <- NULL
ref$treatment <- "NoSIRS"
ref$treatment[curve$id %in% sirs_ids] <- "SIRS"
reference_dat <- ref %>% filter(treatment == "NoSIRS")
bsl <-
hrelsa_adaptive_baselines(
dat,
reference_dat,
vars = vars,
turnvars = turnvars,
ambivars = ambivars,
realtime = "timepoint",
dob_dat = raw_master_full,
dob_data_id_col = 1,
dob_data_dob_col = 3,
norm_dat = raw_norm,
norm_dat_names = names(raw_norm)
)
pre <- bsl$pre
age_pre <- bsl$age_pre
# Write pre in a csv
write.csv(pre, file = "output/pre.csv")
# Generate final data
final <-
hrelsa_final(
pre,
bsl,
drop = dropvars,
turnvars = turnvars,
ambivars = ambivars,
zvars = zvars
)
# Generate some analysis
analysis <- hrelsa_analysis(final)
install.packages(c("hRELSA", "tidyverse", "janitor", "readxl", "ggplot2", "patchwork", "ggsignif", "psych", "car", "lsr", "BSDA"))
ref
#'
#' hRELSA:
#' A translational approach to quantify a patient’s disease severity in real-time
#'
#' R file to reproduce the data and figures
#'
# Libraries ---------------------------------------------------------------
# Prior a installation of each package is needed:
install.packages(
c(
"hRELSA",
"tidyverse",
"janitor",
"readxl",
"ggplot2",
"patchwork",
"ggsignif",
"psych",
"car",
"lsr",
"BSDA"
)
)
library(hRELSA)
library(tidyverse)
library(janitor)
library(readxl)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(psych) # for describeBy and cor
library(car) # for leveneTest
library(lsr) # for cohensD
library(BSDA) # for z.test
# Data setup -------------------------------------------------------------
# The used raw data can be found in the output folder. The data_setup.R shows,
# how it was created. Here they just get fetched.
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
double_vars <-
c("hr",
"pulse",
"sao2",
"rr",
"systolicbp",
"diastolicbp",
"map",
"temperature")
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.double))
raw_master_full <-
as_tibble(read.csv("output/raw_master_full.csv")[,-1])
raw_master_full <- raw_master_full %>% mutate(
pmid = as.factor(pmid),
sex = as.factor(sex),
date_of_birth = as.Date(date_of_birth),
#date_of_die = as.Date(date_of_die),
admission = as.Date(admission),
discharge = as.Date(discharge),
label = as.factor(label)
)
# hRELSA  -----------------------------------------------------------------
# Select the variables to use the hRELSA with
vars <- c("hr", "sao2", "rr", "map", "temperature")
turnvars <- NULL
ambivars <- c("hr", "rr", "map", "temperature")
zvars <- NULL
dropvars <- NULL
# Get reference values
raw_norm <- read_excel("data/reference_values.xlsx", sheet = 1)
# Deletion of pulse
raw_norm <- raw_norm %>% select("age", all_of(vars))
# Generate day column
raw <-
hrelsa_days(raw,
format = "timecode",
formthis = "timepoint",
newdayone = TRUE)
# Format the data
dat <-
hrelsa_format(
raw,
id = "id",
time = "time",
treatment = "treatment",
condition = "condition",
vars = vars,
included_realtime = "timepoint"
)
# Write dat in a csv
write.csv(dat, file = "output/dat.csv")
# Fetch data for maximal severity evaluation
sirs_ids <- unique(final$id[final$sirs == TRUE])
ref <- dat
ref$treatment <- "NoSIRS"
ref$treatment[curve$id %in% sirs_ids] <- "SIRS"
reference_dat <- ref %>% filter(treatment == "NoSIRS")
bsl <-
hrelsa_adaptive_baselines(
dat,
reference_dat,
vars = vars,
turnvars = turnvars,
ambivars = ambivars,
realtime = "timepoint",
dob_dat = raw_master_full,
dob_data_id_col = 1,
dob_data_dob_col = 3,
norm_dat = raw_norm,
norm_dat_names = names(raw_norm)
)
pre <- bsl$pre
age_pre <- bsl$age_pre
# Write pre in a csv
write.csv(pre, file = "output/pre.csv")
# Generate final data
final <-
hrelsa_final(
pre,
bsl,
drop = dropvars,
turnvars = turnvars,
ambivars = ambivars,
zvars = zvars
)
# Generate some analysis
analysis <- hrelsa_analysis(final)
install.packages(c("hRELSA", "tidyverse", "janitor", "readxl", "ggplot2", "patchwork", "ggsignif", "psych", "car", "lsr", "BSDA"))
#'
#' hRELSA:
#' A translational approach to quantify a patient’s disease severity in real-time
#'
#' R file to reproduce the data and figures
#'
# Libraries ---------------------------------------------------------------
# Prior a installation of each package is needed:
install.packages(
c(
"hRELSA",
"tidyverse",
"janitor",
"readxl",
"ggplot2",
"patchwork",
"ggsignif",
"psych",
"car",
"lsr",
"BSDA"
)
)
library(hRELSA)
library(tidyverse)
library(janitor)
library(readxl)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(psych) # for describeBy and cor
library(car) # for leveneTest
library(lsr) # for cohensD
library(BSDA) # for z.test
# Data setup -------------------------------------------------------------
# The used raw data can be found in the output folder. The data_setup.R shows,
# how it was created. Here they just get fetched.
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
double_vars <-
c("hr",
"pulse",
"sao2",
"rr",
"systolicbp",
"diastolicbp",
"map",
"temperature")
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.double))
raw_master_full <-
as_tibble(read.csv("output/raw_master_full.csv")[,-1])
raw_master_full <- raw_master_full %>% mutate(
pmid = as.factor(pmid),
sex = as.factor(sex),
date_of_birth = as.Date(date_of_birth),
#date_of_die = as.Date(date_of_die),
admission = as.Date(admission),
discharge = as.Date(discharge),
label = as.factor(label)
)
# hRELSA  -----------------------------------------------------------------
# Select the variables to use the hRELSA with
vars <- c("hr", "sao2", "rr", "map", "temperature")
turnvars <- NULL
ambivars <- c("hr", "rr", "map", "temperature")
zvars <- NULL
dropvars <- NULL
# Get reference values
raw_norm <- read_excel("data/reference_values.xlsx", sheet = 1)
# Deletion of pulse
raw_norm <- raw_norm %>% select("age", all_of(vars))
# Generate day column
raw <-
hrelsa_days(raw,
format = "timecode",
formthis = "timepoint",
newdayone = TRUE)
#'
#' hRELSA:
#' A translational approach to quantify a patient’s disease severity in real-time
#'
#' R file to reproduce the data and figures
#'
# Libraries ---------------------------------------------------------------
# Prior a installation of each package is needed:
install.packages(
c(
"hRELSA",
"tidyverse",
"janitor",
"readxl",
"ggplot2",
"patchwork",
"ggsignif",
"psych",
"car",
"lsr",
"BSDA"
)
)
library(hRELSA)
library(tidyverse)
library(janitor)
library(readxl)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(psych) # for describeBy and cor
library(car) # for leveneTest
library(lsr) # for cohensD
library(BSDA) # for z.test
# Data setup -------------------------------------------------------------
# The used raw data can be found in the output folder. The data_setup.R shows,
# how it was created. Here they just get fetched.
raw <- as_tibble(read.csv("output/raw.csv")[,-1])
double_vars <-
c("hr",
"pulse",
"sao2",
"rr",
"systolicbp",
"diastolicbp",
"map",
"temperature")
raw <- raw %>% mutate(
timepoint = as.POSIXct(timepoint, tz = ""),
treatment = as.factor(treatment),
condition = as.factor(condition)
) %>%
mutate(across(all_of(double_vars), as.double))
raw_master_full <-
as_tibble(read.csv("output/raw_master_full.csv")[,-1])
raw_master_full <- raw_master_full %>% mutate(
pmid = as.factor(pmid),
sex = as.factor(sex),
date_of_birth = as.Date(date_of_birth),
#date_of_die = as.Date(date_of_die),
admission = as.Date(admission),
discharge = as.Date(discharge),
label = as.factor(label)
)
# hRELSA  -----------------------------------------------------------------
# Select the variables to use the hRELSA with
vars <- c("hr", "sao2", "rr", "map", "temperature")
turnvars <- NULL
ambivars <- c("hr", "rr", "map", "temperature")
zvars <- NULL
dropvars <- NULL
# Get reference values
raw_norm <- read_excel("data/reference_values.xlsx", sheet = 1)
# Deletion of pulse
raw_norm <- raw_norm %>% select("age", all_of(vars))
# Generate day column
raw <-
hrelsa_days(raw,
format = "timecode",
formthis = "timepoint",
newdayone = TRUE)
