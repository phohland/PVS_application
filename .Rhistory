raw
final
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time >= min(time[proven_sepsis == TRUE]) & time <= max(rms$rms))
filtered_data
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time >= min(rms$rms[proven_sepsis == TRUE]) & time <= max(rms$rms))
filtered_data
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids)
filtered_data
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time >= min(time[proven_sepsis == TRUE]) & time <= max(time))
filtered_data
time[max(rms$rms)]
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time >= min(time[proven_sepsis == TRUE]) & time <= time[max(rms$rms)])
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time >= min(time[proven_sepsis == TRUE]) & time <= time[rms$rms == max(rms$rms)])
filtered_data
model <- lm(rms$rms ~ time, data = filtered_data)
summary(model)
filtered_data %>% filter(id == "1000039")
filtered_data %>% filter(id == "100039")
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time = min(time[proven_sepsis == TRUE]) & time = time[rms$rms == max(rms$rms)])
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time == min(time[proven_sepsis == TRUE]) & time == time[rms$rms == max(rms$rms)])
filtered_data
filtered_data <- final %>%
group_by(id) %>%
filter(id %in% proven_sepsis_ids) %>%
filter(time >= min(time[proven_sepsis == TRUE]) & time <= time[which.max(rms$rms)])
filtered_data
model <- lm(rms$rms ~ time, data = filtered_data)
summary(model)
model <- lm(time ~ rms$rms, data = filtered_data)
summary(model)
model <- lm(rms$rms ~ time, data = filtered_data)
summary(model)
model <- lmer(rms$rms ~ time + (1|id), data = filtered_data)
summary(model)
model <- lmer(rms$rms ~ scale(time) + (1|id), data = filtered_data)
summary(model)
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis) && max(rms$rms) >= max(rms$rms[proven_sepsis]), (rms$rms[time == max(time)] - rms$rms[proven_sepsis]) / (max(time) - time[proven_sepsis]), NA))
slope_table
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis) && max(rms$rms) == max(rms$rms[proven_sepsis]), (rms$rms[time == max(time)] - rms$rms[proven_sepsis]) / (max(time) - time[proven_sepsis]), NA))
slope_table
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis), (rms$rms[time == max(time[proven_sepsis])] - rms$rms[proven_sepsis[1]]) / (max(time[proven_sepsis]) - time[proven_sepsis[1]]), NA))
slope_table
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis), (max(rms$rms[proven_sepsis]) - first(rms$rms[proven_sepsis])) / (time[proven_sepsis][which.max(rms$rms[proven_sepsis])] - first(time[proven_sepsis][which.max(rms$rms[proven_sepsis])])), NA))
slope_table
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis),
(last(rms$rms[time == max(time[proven_sepsis]) & proven_sepsis]) - first(rms$rms[proven_sepsis & time == min(time[proven_sepsis])])),
NA))
slope_table
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis),
(rms$rms[which.min(time[proven_sepsis])] - rms$rms[which.max(time[proven_sepsis & rms$rms == max(rms$rms[proven_sepsis])])]),
NA))
slope_table
slope_table <- filtered_data %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis),
ifelse(sum(proven_sepsis) > 1,
(rms$rms[which.min(time[proven_sepsis])] - rms$rms[which.max(time[proven_sepsis & rms$rms == max(rms$rms[proven_sepsis])])]),
NA),
NA))
slope_table
final
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(any(proven_sepsis),
ifelse(sum(proven_sepsis) > 1,
(last(rms$rms[proven_sepsis]) - rms$rms[proven_sepsis][1]),
NA),
NA))
slope_table
slope_table <- final %>%
group_by(id) %>%
summarize(slope = ifelse(sum(proven_sepsis) > 0,
ifelse(any(proven_sepsis),
(max(rms$rms[proven_sepsis]) - rms$rms[proven_sepsis][1]),
NA),
NA))
slope_table
max(rms$rms)[proven_sepsis == TRUE]
slope_table <- final %>%
group_by(id) %>%
summarize(
slope = (max(rms$rms)[proven_sepsis == TRUE])
)
slope_table
max(rms$rms)
slope_table <- final %>%
group_by(id) %>%
summarize(
slope = (max(rms$rms)[proven_sepsis == TRUE] - first(rms$rms)[proven_sepsis == TRUE])
)
slope_table
slope_table <- final %>%
group_by(id) %>%
mutate(
slope = (max(rms$rms)[proven_sepsis == TRUE] - first(rms$rms)[proven_sepsis == TRUE])
)
slope_table <- tibble(id = character(), slope = numeric())
slope_table
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
filtered_data
unique(filtered_data$id)
i <- 1
id <- filtered_data[id == unique(filtered_data$id)[i]]
unique(filtered_data$id)[i]
filtered_data
as.character(unique(filtered_data$id)[i])
id <- filtered_data[id == as.character(unique(filtered_data$id)[i])]
id <- filtered_data[id == unlist(unique(filtered_data$id)[i])]
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
data
id <- unique(filtered_data$id)[i]
id
id <- as.character(unique(filtered_data$id)[i])
id
index_max <- which.max(data$rms$rms)
index_max
filtered_data$proven_sepsis
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- (data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1)
arr <- c(id, slope)
rbind(arr, slope_table)
}
slope_table
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- (data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1)
arr <- c(id, slope)
rbind(arr, slope_table)
}
length(unique(filtered_data$id))
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
data
id <- as.character(unique(filtered_data$id)[i])
id
index_max <- which.max(data$rms$rms)
index_max
slope <- (data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1)
slope
arr <- c(id, slope)
arr
rbind(arr, slope_table)
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- (data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1)
arr <- c(id, slope)
slope_table <- rbind(arr, slope_table)
}
slope_table
slope_table <- tibble(id = character(), slope = numeric())
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (time[index_max] - time[1]))
arr <- c(id, slope)
slope_table <- rbind(arr, slope_table)
}
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (data$time[index_max] - data$time[1]))
arr <- c(id, slope)
slope_table <- rbind(arr, slope_table)
}
slope_table
dat
# Lineares Modell erstellen
model <- lm(hr ~ sirs + sao2 + rr + map + temperature, data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
# Lineares Modell erstellen
model <- lm(sirs ~ hr + sao2 + rr + map + temperature, data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
table <- modelsummary(model)
install.packages("modelsummary")
library(modelsummary)
table <- modelsummary(model)
table
# Lineares Modell erstellen
model <- lm(suspected_sepsis ~ hr + sao2 + rr + map + temperature, data = raw)
raw
# Lineares Modell erstellen
model <- lm(sus_sepsis ~ hr + sao2 + rr + map + temperature, data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
table <- modelsummary(model)
table
table
# Lineares Modell erstellen
model <- lm(proven_sepsis ~ hr + sao2 + rr + map + temperature, data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr + sao2 + rr + map + temperature + (1|id), data = raw)
library(lme4)
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr + sao2 + rr + map + temperature + (1|id), data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
i <- 1
slope_table <- tibble(id = character(), slope = numeric())
# Install required packages if not already and load them
for (package_name in required_packages) {
if (!require(package_name,
character.only = TRUE,
quietly = TRUE)) {
install.packages(package_name)
library(package_name, character.only = TRUE)
} else {
library(package_name, character.only = TRUE)
}
}
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
filtered_data
unique(filtered_data$id)
length(unique(filtered_data$id))
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
data
id <- as.character(unique(filtered_data$id)[i])
id
index_max <- which.max(data$rms$rms)
index_max
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
slope
arr <- c(id, slope)
arr
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- c(id, slope)
slope_table <- rbind(arr, slope_table)
}
slope_table
arr <- c(as.character(id), as.numeric(slope))
arr
arr <- tibble(id = id, slope = slope)
arr
i <- 1
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- tibble(id = id, slope = as.numeric(slope))
arr
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- tibble(id = id, slope = as.numeric(slope))
slope_table <- rbind(arr, slope_table)
}
slope_table
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% sirs_ids & sirs == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- tibble(id = id, slope = as.numeric(slope))
slope_table <- rbind(arr, slope_table)
}
slope_table
mean(slope_table$slope, na.rm = TRUE)
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- tibble(id = id, slope = as.numeric(slope))
slope_table <- rbind(arr, slope_table)
}
mean(slope_table$slope, na.rm = TRUE)
full_index_max <- which(full_data$rms$rms == data$rms$rms[index_max] & full_data$proven_sepsis == TRUE)
full_data <- final %>% filter(id == id)
index_max <- which.max(data$rms$rms)
full_index_max <- which(full_data$rms$rms == data$rms$rms[index_max] & full_data$proven_sepsis == TRUE)
full_index_max
index_max
full_index_max <- which(full_data$rms$rms == data$rms$rms[index_max] & full_data$proven_sepsis == TRUE)[1]
full_index_max
full_data
i <- 1
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id_here <- as.character(unique(filtered_data$id)[i])
full_data <- final %>% filter(id == id_here)
index_max <- which.max(data$rms$rms)
full_index_max <- which(full_data$rms$rms == data$rms$rms[index_max] & full_data$proven_sepsis == TRUE)[1]
slope <- as.numeric((data$rms$rms[index_max] - full_data$rms$rms[1]) / (full_index_max - 1))
arr <- tibble(id = id_here, slope = as.numeric(slope))
arr
data$rms$rms[index_max]
full_data$rms$rms[1]
full_index_max
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- tibble(id = id, slope = as.numeric(slope))
slope_table <- rbind(arr, slope_table)
}
mean(slope_table$slope, na.rm = TRUE)
slope_table
i <- 5
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
index_max <- which.max(data$rms$rms)
slope <- as.numeric((data$rms$rms[index_max] - data$rms$rms[1]) / (index_max - 1))
arr <- tibble(id = id, slope = as.numeric(slope))
arr
data$rms$rms[index_max]
data$rms$rms[1]
index_max
final
full_data <- final %>% filter(id == id)
index_max <- which.max(data$rms$rms)
time_max <- data$timepoint[index_max]
index_before <- which(full_data$timepoint == data$timepoint) - 1
full_data$timepoint
full_data <- final %>% filter(id == id)
full_data
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
data
index_before <- which(full_data$timepoint == data$timepoint) - 1
index_before
index_before <- match(data$timepoint, full_data$timepoint) - 1
index_before
index_before <- which(full_data$timepoint == data$timepoint[1]) - 1
index_before
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% proven_sepsis_ids & proven_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
full_data <- final %>% filter(id == id)
index_max <- which.max(data$rms$rms)
time_max <- data$timepoint[index_max]
index_before <- which(full_data$timepoint == data$timepoint[1]) - 1
index_max_full <- which(full_data$timepoint == data$timepoint[index_max])
slope <- as.numeric((data$rms$rms[index_max] - full_data$rms$rms[index_before]) / (index_max_full - index_before))
arr <- tibble(id = id, slope = as.numeric(slope))
slope_table <- rbind(arr, slope_table)
}
slope_table
mean(slope_table$slope, na.rm = TRUE)
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% sus_ids & suspected_sepsis == TRUE)
final
slope_table <- tibble(id = character(), slope = numeric())
filtered_data <- final %>% filter(id %in% sus_ids & sus_sepsis == TRUE)
for (i in 1:length(unique(filtered_data$id))) {
data <- filtered_data %>% filter(id == unique(filtered_data$id)[i])
id <- as.character(unique(filtered_data$id)[i])
full_data <- final %>% filter(id == id)
index_max <- which.max(data$rms$rms)
time_max <- data$timepoint[index_max]
index_before <- which(full_data$timepoint == data$timepoint[1]) - 1
index_max_full <- which(full_data$timepoint == data$timepoint[index_max])
slope <- as.numeric((data$rms$rms[index_max] - full_data$rms$rms[index_before]) / (index_max_full - index_before))
arr <- tibble(id = id, slope = as.numeric(slope))
slope_table <- rbind(arr, slope_table)
}
mean(slope_table$slope, na.rm = TRUE)
slope_table
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
# Lineares Modell erstellen
#model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
model <- lmer(proven_sepsis ~ hr + sao2 + rr + map + temperature + (1|id), data = raw)
# Zusammenfassung des Modells anzeigen
summary(model)
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
# Required packages
required_packages <- c(
"hRELSA",
"tidyverse",
"janitor",
"readxl",
"ggplot2",
"patchwork",
"ggsignif",
"psych",
# for describeBy and cor
"lsr",
# for cohensD
"BSDA",
# for z.test
"zoo",
# for rollmean
"writexl",
"survival"
)
# Install required packages if not already and load them
for (package_name in required_packages) {
if (!require(package_name,
character.only = TRUE,
quietly = TRUE)) {
install.packages(package_name)
library(package_name, character.only = TRUE)
} else {
library(package_name, character.only = TRUE)
}
}
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
library("lmer")
library("lme4")
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
summary(model)
library(lmerTest)
summary(model)
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
summary(model)
# Lineares Modell erstellen
model <- lmer(proven_sepsis ~ hr * time + sao2 * time + rr * time + map * time + temperature * time + (1|id), data = raw)
summary(model)
model <- lmer(proven_sepsis ~ hr + sao2 + rr + map + temperature + (1|id), data = raw)
summary(model)
sum <- summary(model)
write.xlsx(sum, file = "modell_summary.xlsx")
write_xlsx(sum, file = "modell_summary.xlsx")
write_xlsx(sum, "modell_summary.xlsx")
sum <- as.data.frame(summary(model))
summary(model)
nosirs_desc
sirs_desc
# p-values
z.test(
x = nosirs_desc$stay,
y = sirs_desc$stay[desc$ProvenSepsis == FALSE],
sigma.x = sd(nosirs_desc$stay, na.rm = TRUE),
sigma.y = sd(sirs_desc$stay[desc$ProvenSepsis == FALSE], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(as.numeric(nosirs_desc$stay),
as.numeric(sirs_desc$stay))
