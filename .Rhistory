sirs_ids <- unique(final$id[final$sirs == TRUE])
curve <- final
curve$treatment <- NULL
curve$treatment <- "NoSIRS"
curve$treatment[curve$id %in% sirs_ids] <- "SIRS"
curve <- curve %>% mutate(
treatment = factor(treatment,
levels = c("NoSIRS", "SIRS"),
labels = c("No SIRS", "SIRS"))
)
max_pvs <- aggregate(rms$rms ~ id, curve, max)
last_pvs <- aggregate(rms$rms ~ id, curve, tail, n = 1)
curve0 <- merge(max_pvs, last_pvs, by = "id")
curve0$treatment <- curve$treatment[match(curve0$id, curve$id)]
colnames(curve0) <- c("id", "max_pvs", "last_pvs", "treatment")
curve00 <- data.frame(
id = rep(curve0$id, times = 2),
pvs = c(curve0$max_pvs, curve0$last_pvs),
type = rep(c("max", "last"), each = nrow(curve0)),
treatment = rep(curve0$treatment, times = 2)
)
curve00 <- as_tibble(curve00)
curve00$type <- factor(curve00$type, levels = c("max", "last"))
# Figure
pm1 <- curve00 %>%
ggplot(aes(x = treatment, y = pvs, color = type)) +
ggtitle("A") +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.35),
size = 3,
alpha = 0.75) +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_signif(
y_position = c(1.05, 1.05, 1.15), xmin = c(0.8, 1.8, 0.8), xmax = c(1.2, 2.2, 1.8),
annotation = c("****", "****", "****"), tip_length = 0.03, color = "black", textsize = 6) +
labs (x = "", y = "PVS", color = "PVS Type") +
theme_classic() +
theme(
legend.position = "top",
axis.text = element_text(size = 13),
axis.title = element_text(size = 18)
) +
scale_color_manual(values = c("max" = "#B30000", "last" = "#001F5C"))
pm1
### Statistics
#SIRS
curve00_sirs <- curve00[curve00$treatment == "SIRS", ]
describeBy(curve00_sirs$pvs, curve00_sirs$type)
z.test(
x = curve00_sirs$pvs[curve00_sirs$type == "max"],
y = curve00_sirs$pvs[curve00_sirs$type == "last"],
sigma.x = sd(curve00_sirs$pvs[curve00_sirs$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_sirs$pvs[curve00_sirs$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_sirs)
shapiro_max <- shapiro.test(curve00_sirs$pvs[curve00_sirs$type == "max"])
shapiro_last <- shapiro.test(curve00_sirs$pvs[curve00_sirs$type == "last"])
wilcox <- wilcox.test(curve00_sirs$pvs[curve00_sirs$type == "max"], curve00_sirs$pvs[curve00_sirs$type == "last"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_sirs), pvs ~ type)
eff <- wilcox_effsize(as.data.frame(curve00_sirs), pvs ~ type)
# No SIRS
curve00_nosirs <- curve00[curve00$treatment == "No SIRS", ]
describeBy(curve00_nosirs$pvs, curve00_nosirs$type)
z.test(
x = curve00_nosirs$pvs[curve00_nosirs$type == "max"],
y = curve00_nosirs$pvs[curve00_nosirs$type == "last"],
sigma.x = sd(curve00_nosirs$pvs[curve00_nosirs$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_nosirs$pvs[curve00_nosirs$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_nosirs)
shapiro_max <- shapiro.test(curve00_nosirs$pvs[curve00_nosirs$type == "max"])
shapiro_last <- shapiro.test(curve00_nosirs$pvs[curve00_nosirs$type == "last"])
wilcox <- wilcox.test(curve00_nosirs$pvs[curve00_nosirs$type == "max"], curve00_nosirs$pvs[curve00_nosirs$type == "last"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_nosirs), pvs ~ type)
eff <- wilcox_effsize(as.data.frame(curve00_nosirs), pvs ~ type)
# Last comparison
curve00_last <- curve00[curve00$type == "last", ]
describeBy(curve00_last$pvs, curve00_last$treatment)
z.test(
x = curve00_last$pvs[curve00_last$treatment == "SIRS"],
y = curve00_last$pvs[curve00_last$treatment == "No SIRS"],
sigma.x = sd(curve00_last$pvs[curve00_last$treatment == "SIRS"], na.rm = TRUE),
sigma.y = sd(curve00_last$pvs[curve00_last$treatment == "No SIRS"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ treatment, data = curve00_last)
shapiro_with <- shapiro.test(curve00_last$pvs[curve00_last$treatment == "SIRS"])
shapiro_without <- shapiro.test(curve00_last$pvs[curve00_last$treatment == "No SIRS"])
wilcox <- wilcox.test(curve00_last$pvs[curve00_last$treatment == "SIRS"], curve00_last$pvs[curve00_last$treatment == "No SIRS"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_last), pvs ~ treatment)
eff <- wilcox_effsize(as.data.frame(curve00_last), pvs ~ treatment)
## Proven Sepsis
proven_sepsis_ids <- unique(final$id[final$proven_sepsis == TRUE])
curve <- final
curve$treatment <- NULL
curve$treatment <- "NoProvenSepsis"
curve$treatment[curve$id %in% proven_sepsis_ids] <- "ProvenSepsis"
curve <- curve %>% mutate(
treatment = factor(treatment,
levels = c("NoProvenSepsis", "ProvenSepsis"),
labels = c("No Proven Sepsis", "Proven Sepsis"))
)
max_pvs <- aggregate(rms$rms ~ id, curve, max)
last_pvs <- aggregate(rms$rms ~ id, curve, tail, n = 1)
curve0 <- merge(max_pvs, last_pvs, by = "id")
curve0$treatment <- curve$treatment[match(curve0$id, curve$id)]
colnames(curve0) <- c("id", "max_pvs", "last_pvs", "treatment")
curve00 <- data.frame(
id = rep(curve0$id, times = 2),
pvs = c(curve0$max_pvs, curve0$last_pvs),
type = rep(c("max", "last"), each = nrow(curve0)),
treatment = rep(curve0$treatment, times = 2)
)
curve00 <- as_tibble(curve00)
curve00$type <- factor(curve00$type, levels = c("max", "last"))
# Figure
pm2 <- curve00 %>%
ggplot(aes(x = treatment, y = pvs, color = type)) +
ggtitle("C") +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.35),
size = 3,
alpha = 0.75) +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_signif(
y_position = c(1.05, 1.05, 1.15), xmin = c(0.8, 1.8, 0.8), xmax = c(1.2, 2.2, 1.8),
annotation = c("****", "**", "**"), tip_length = 0.03, color = "black", textsize = 6) +
labs (x = "", y = "PVS", color = "PVS Type") +
theme_classic() +
theme(
legend.position = "top",
axis.text = element_text(size = 13),
axis.title = element_text(size = 18)
) +
scale_color_manual(values = c("max" = "#B30000", "last" = "#001F5C"))
pm2
### Statistics
#Proven Spesis
curve00_prov <- curve00[curve00$treatment == "Proven Sepsis", ]
describeBy(curve00_prov$pvs, curve00_prov$type)
z.test(
x = curve00_prov$pvs[curve00_prov$type == "max"],
y = curve00_prov$pvs[curve00_prov$type == "last"],
sigma.x = sd(curve00_prov$pvs[curve00_prov$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_prov$pvs[curve00_prov$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_prov)
shapiro_max <- shapiro.test(curve00_prov$pvs[curve00_prov$type == "max"])
shapiro_last <- shapiro.test(curve00_prov$pvs[curve00_prov$type == "last"])
wilcox <- wilcox.test(curve00_prov$pvs[curve00_prov$type == "max"], curve00_prov$pvs[curve00_prov$type == "last"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_prov), pvs ~ type)
eff <- wilcox_effsize(as.data.frame(curve00_prov), pvs ~ type)
# No Proven Sepsis
curve00_noprov <- curve00[curve00$treatment == "No Proven Sepsis", ]
describeBy(curve00_noprov$pvs, curve00_noprov$type)
z.test(
x = curve00_noprov$pvs[curve00_noprov$type == "max"],
y = curve00_noprov$pvs[curve00_noprov$type == "last"],
sigma.x = sd(curve00_noprov$pvs[curve00_noprov$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_noprov$pvs[curve00_noprov$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_noprov)
shapiro_max <- shapiro.test(curve00_noprov$pvs[curve00_noprov$type == "max"])
shapiro_last <- shapiro.test(curve00_noprov$pvs[curve00_noprov$type == "last"])
wilcox <- wilcox.test(curve00_noprov$pvs[curve00_noprov$type == "max"], curve00_noprov$pvs[curve00_noprov$type == "last"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_noprov), pvs ~ type)
eff <- wilcox_effsize(as.data.frame(curve00_noprov), pvs ~ type)
# Last comparison
curve00_last <- curve00[curve00$type == "last", ]
describeBy(curve00_last$pvs, curve00_last$treatment)
z.test(
x = curve00_last$pvs[curve00_last$treatment == "Proven Sepsis"],
y = curve00_last$pvs[curve00_last$treatment == "No Proven Sepsis"],
sigma.x = sd(curve00_last$pvs[curve00_last$treatment == "Proven Sepsis"], na.rm = TRUE),
sigma.y = sd(curve00_last$pvs[curve00_last$treatment == "No Proven Sepsis"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ treatment, data = curve00_last)
shapiro_with <- shapiro.test(curve00_last$pvs[curve00_last$treatment == "Proven Sepsis"])
shapiro_without <- shapiro.test(curve00_last$pvs[curve00_last$treatment == "No Proven Sepsis"])
wilcox <- wilcox.test(curve00_last$pvs[curve00_last$treatment == "Proven Sepsis"], curve00_last$pvs[curve00_last$treatment == "No Proven Sepsis"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_last), pvs ~ treatment)
eff <- wilcox_effsize(as.data.frame(curve00_last), pvs ~ treatment)
## Suspected Sepsis
sus_ids <- unique(final$id[final$sus_sepsis == TRUE])
curve <- final
curve$treatment <- NULL
curve$treatment <- "NoSuspectedSepsis"
curve$treatment[curve$id %in% sus_ids] <- "SuspectedSepsis"
curve <- curve %>% mutate(
treatment = factor(treatment,
levels = c("NoSuspectedSepsis", "SuspectedSepsis"),
labels = c("No Suspected Sepsis", "Suspected Sepsis"))
)
max_pvs <- aggregate(rms$rms ~ id, curve, max)
last_pvs <- aggregate(rms$rms ~ id, curve, tail, n = 1)
curve0 <- merge(max_pvs, last_pvs, by = "id")
curve0$treatment <- curve$treatment[match(curve0$id, curve$id)]
colnames(curve0) <- c("id", "max_pvs", "last_pvs", "treatment")
curve00 <- data.frame(
id = rep(curve0$id, times = 2),
pvs = c(curve0$max_pvs, curve0$last_pvs),
type = rep(c("max", "last"), each = nrow(curve0)),
treatment = rep(curve0$treatment, times = 2)
)
curve00 <- as_tibble(curve00)
curve00$type <- factor(curve00$type, levels = c("max", "last"))
# Figure
pm3 <- curve00 %>%
ggplot(aes(x = treatment, y = pvs, color = type)) +
ggtitle("B") +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.35),
size = 3,
alpha = 0.75) +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_signif(
y_position = c(1.05, 1.05, 1.15), xmin = c(0.8, 1.8, 0.8), xmax = c(1.2, 2.2, 1.8),
annotation = c("****", "****", "***"), tip_length = 0.03, color = "black", textsize = 6) +
labs (x = "", y = "PVS", color = "PVS Type") +
theme_classic() +
theme(
legend.position = "top",
axis.text = element_text(size = 13),
axis.title = element_text(size = 18)
) +
scale_color_manual(values = c("max" = "#B30000", "last" = "#001F5C"))
pm3
### Statistics
#Suspected Spesis
curve00_sus <- curve00[curve00$treatment == "Suspected Sepsis", ]
describeBy(curve00_sus$pvs, curve00_sus$type)
z.test(
x = curve00_sus$pvs[curve00_sus$type == "max"],
y = curve00_sus$pvs[curve00_sus$type == "last"],
sigma.x = sd(curve00_sus$pvs[curve00_sus$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_sus$pvs[curve00_sus$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_sus)
shapiro_max <- shapiro.test(curve00_sus$pvs[curve00_sus$type == "max"])
shapiro_last <- shapiro.test(curve00_sus$pvs[curve00_sus$type == "last"])
wilcox <- wilcox.test(curve00_sus$pvs[curve00_sus$type == "max"], curve00_sus$pvs[curve00_sus$type == "last"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_sus), pvs ~ type)
eff <- wilcox_effsize(as.data.frame(curve00_sus), pvs ~ type)
# No Suspected Sepsis
curve00_nosus <- curve00[curve00$treatment == "No Suspected Sepsis", ]
describeBy(curve00_nosus$pvs, curve00_nosus$type)
z.test(
x = curve00_nosus$pvs[curve00_nosus$type == "max"],
y = curve00_nosus$pvs[curve00_nosus$type == "last"],
sigma.x = sd(curve00_nosus$pvs[curve00_nosus$type == "max"], na.rm = TRUE),
sigma.y = sd(curve00_nosus$pvs[curve00_nosus$type == "last"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ type, data = curve00_nosus)
shapiro_max <- shapiro.test(curve00_nosus$pvs[curve00_nosus$type == "max"])
shapiro_last <- shapiro.test(curve00_nosus$pvs[curve00_nosus$type == "last"])
wilcox <- wilcox.test(curve00_nosus$pvs[curve00_nosus$type == "max"], curve00_nosus$pvs[curve00_nosus$type == "last"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_nosus), pvs ~ type)
eff <- wilcox_effsize(as.data.frame(curve00_nosus), pvs ~ type)
# Last comparison
curve00_last <- curve00[curve00$type == "last", ]
describeBy(curve00_last$pvs, curve00_last$treatment)
z.test(
x = curve00_last$pvs[curve00_last$treatment == "Suspected Sepsis"],
y = curve00_last$pvs[curve00_last$treatment == "No Suspected Sepsis"],
sigma.x = sd(curve00_last$pvs[curve00_last$treatment == "Suspected Sepsis"], na.rm = TRUE),
sigma.y = sd(curve00_last$pvs[curve00_last$treatment == "No Suspected Sepsis"], na.rm = TRUE),
alternative = "two.sided"
)
cohensD(pvs ~ treatment, data = curve00_last)
shapiro_with <- shapiro.test(curve00_last$pvs[curve00_last$treatment == "Suspected Sepsis"])
shapiro_without <- shapiro.test(curve00_last$pvs[curve00_last$treatment == "No Suspected Sepsis"])
wilcox <- wilcox.test(curve00_last$pvs[curve00_last$treatment == "Suspected Sepsis"], curve00_last$pvs[curve00_last$treatment == "No Suspected Sepsis"], exact = FALSE)
wilcox <- wilcox_test(as.data.frame(curve00_last), pvs ~ treatment)
eff <- wilcox_effsize(as.data.frame(curve00_last), pvs ~ treatment)
# Panel Plot ###
maxlast <- pm1 +  pm3 + pm2
maxlast <- maxlast + plot_layout(ncol = 3, guides = "collect") & theme(legend.position = "top", plot.title = element_text(face = "bold"))
maxlast
ggsave(
"figs/figure_2.tiff",
plot = maxlast,
dpi = 300,
width = 14,
height = 7,
units = "in",
compression = "lzw"
)
curve <- final %>% filter(treatment == "NoSIRS") %>%
group_by(id, treatment) %>%
summarise(max = max(as.numeric(unlist(rms)), na.rm = TRUE))
curve_sirs <- final %>% filter(treatment == "SIRS" & !(id %in% sus_ids) & !(id %in% proven_sepsis_ids)) %>%
group_by(id, treatment) %>%
summarise(max = max(as.numeric(unlist(rms)), na.rm = TRUE))
curve_sirs$treatment <- as.factor("SIRS")
curve_sus <- final %>% filter(id %in% sus_ids & !(id %in% proven_sepsis_ids)) %>%
group_by(id, treatment) %>%
summarise(max = max(as.numeric(unlist(rms)), na.rm = TRUE))
curve_sus$treatment <- as.factor("Suspected Sepsis")
curve_prov <- final %>% filter(id %in% proven_sepsis_ids) %>%
group_by(id, treatment) %>%
summarise(max = max(as.numeric(unlist(rms)), na.rm = TRUE))
curve_prov$treatment <- as.factor("Proven Sepsis")
curve <- rbind(curve, curve_sirs, curve_sus, curve_prov)
curve <- curve %>% mutate(treatment = factor(treatment,
levels = c("NoSIRS", "SIRS", "Suspected Sepsis", "Proven Sepsis"),
labels = c("No SIRS", "SIRS", "Suspected Sepsis", "Proven Sepsis")))
p4 <- curve %>%
ggplot(aes(x = treatment, y = max, color = treatment)) +
#ggtitle("C") +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 1),
size = 3,
alpha = 0.75) +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_signif(
y_position = c(1.05, 1.15, 1.25), xmin = c(1,1,1), xmax = c(2,3,4),
annotation = c("*", "***", "***"), tip_length = 0.03, color = "black", textsize = 6) +
labs (x = "", y = expression('PVS'[max])) +
theme_classic() +
theme(
legend.position = "none",
axis.text = element_text(size = 13),
axis.title = element_text(size = 18)
) +
scale_color_manual(values = c( "#001F5C", "#B30000", "#B30000", "#B30000"))
p4
ggsave(
"figs/figure_3.tiff",
plot = p4,
dpi = 300,
units = "in",
compression = "lzw"
)
desc <- master
desc$stay <- desc$discharge - desc$admission
desc$age_at_admission <- desc$admission - desc$date_of_birth
#desc$age_at_discharge <- desc$discharge - desc$date_of_birth
desc$SIRS <- ifelse(desc$pmid %in% sirs_ids, TRUE, FALSE)
desc$SuspectedSepsis <- ifelse(desc$pmid %in% sus_ids, TRUE, FALSE)
desc$ProvenSepsis <- ifelse(desc$pmid %in% proven_sepsis_ids, TRUE, FALSE)
desc <- desc %>% select(-date_of_die, - date_of_birth, -admission, -discharge)
length(unique(desc$pmid))
mean(desc$stay)
mean(desc$age_at_admission)
female_desc <- desc %>% filter(sex == "f")
length(female_desc$pmid)
mean(female_desc$stay)
mean(female_desc$age_at_admission)
male_desc <- desc %>% filter(sex == "m")
length(male_desc$pmid)
mean(male_desc$stay)
mean(male_desc$age_at_admission)
nosirs_desc <- desc %>% filter(SIRS == FALSE)
length(nosirs_desc$pmid)
mean(nosirs_desc$stay)
mean(nosirs_desc$age_at_admission)
sirs_desc <- desc %>% filter(SIRS == TRUE)
length(sirs_desc$pmid)
mean(sirs_desc$stay)
mean(sirs_desc$age_at_admission)
sus_desc <- desc %>% filter(SuspectedSepsis == TRUE)
length(sus_desc$pmid)
mean(sus_desc$stay)
mean(sus_desc$age_at_admission)
prov_desc <- desc %>% filter(ProvenSepsis == TRUE)
length(prov_desc$pmid)
mean(prov_desc$stay)
mean(prov_desc$age_at_admission)
# p-values
shapiro_nosirs <- shapiro.test(as.numeric(nosirs_desc$stay))
shapiro_sirs <- shapiro.test(as.numeric(sirs_desc$stay))
wilcox <- wilcox.test(as.numeric(nosirs_desc$stay), as.numeric(sirs_desc$stay), exact = FALSE)
cohensD(as.numeric(nosirs_desc$stay),
as.numeric(sirs_desc$stay))
stay_values <- c(sirs_desc$stay, nosirs_desc$stay)
condition_values <- c(rep("SIRS", length(sirs_desc$stay)), rep("No SIRS", length(nosirs_desc$stay)))
data_frame <- data.frame(stay = stay_values, condition = factor(condition_values))
data_frame
wilcox <- wilcox_test(data_frame, stay ~ condition)
eff <- wilcox_effsize(data_frame, stay ~ condition)
stay_values <- c(sirs_desc$stay, nosirs_desc$stay)
condition_values <- c(rep("SIRS", length(sirs_desc$stay)), rep("No SIRS", length(nosirs_desc$stay)))
data_frame <- data.frame(stay = numeric(stay_values), condition = factor(condition_values))
wilcox <- wilcox_test(data_frame, as.numeric(stay) ~ condition)
stay_values <- c(as.numeric(sirs_desc$stay), as.numeric(nosirs_desc$stay))
condition_values <- c(rep("SIRS", length(sirs_desc$stay)), rep("No SIRS", length(nosirs_desc$stay)))
data_frame <- data.frame(stay = stay_values, condition = factor(condition_values))
wilcox <- wilcox_test(data_frame, stay ~ condition)
eff <- wilcox_effsize(data_frame, stay ~ condition)
wilcox
eff
analysis # To find out the patient with the highest severity
table(final$id) # check entries: 179
which_id <- "101137"
which_time <- "1"
dat %>% filter(id == which_id, time == which_time)
age_pre %>% filter(id == which_id, time == which_time)
final  %>% filter(id == which_id, time == which_time) #%>% select("sirs", "sus_sepsis")
final  %>% filter(id == which_id, time >= 498180, time <= 499620)
xx <- final %>% filter(id == which_id)
mean(xx$rms$rms, na.rm = TRUE)
arrange(xx, time)
# Comparison Suspected Sepsis PVS and no suspected Sepsis PVS
describeBy(xx$rms$rms, xx$sus_sepsis)
shapiro_sus <- shapiro.test(xx$rms$rms[xx$sus_sepsis == "TRUE"])
shapiro_nosus <- shapiro.test(xx$rms$rms[xx$sus_sepsis == "FALSE"])
xx$nrms <- xx$rms$rms
wilcox <- wilcox_test(as.data.frame(xx), nrms ~ sus_sepsis)
eff <- wilcox_effsize(as.data.frame(xx), nrms ~ sus_sepsis)
wilcox
eff
raw
raw$hr_scaled <- scale(raw$hr)
raw$sao2_scaled <- scale(raw$sao2)
raw$rr_scaled <- scale(raw$rr)
raw$map_scaled <- scale(raw$map)
raw$temperature_scaled <- scale(raw$temperature)
model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial)
summary(model)
summary(model)
raw$hr_scaled <- scale(raw$hr)
raw$sao2_scaled <- scale(raw$sao2)
raw$rr_scaled <- scale(raw$rr)
raw$map_scaled <- scale(raw$map)
raw$temperature_scaled <- scale(raw$temperature)
model1 <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial)
summary(model1)
raw$hr_scaled <- scale(raw$hr)
raw$sao2_scaled <- scale(raw$sao2)
raw$rr_scaled <- scale(raw$rr)
raw$map_scaled <- scale(raw$map)
raw$temperature_scaled <- scale(raw$temperature)
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"))
# Likelihood ratio test for the significance of random effects
null_model <- glmer(sirs ~ (1| Patient_ID), family = binomial(link = "logit"), data = dataset)
# Likelihood ratio test for the significance of random effects
null_model <- glmer(sirs ~ (1| Patient_ID), family = binomial(link = "logit"), data = raw)
# Likelihood ratio test for the significance of random effects
null_model <- glmer(sirs ~ (1| id), family = binomial(link = "logit"), data = raw)
lr_test <- anova(null_model, glm_model)
print(lr_test)
summary(null_model)
summary(glm_model)
print(lr_test)
conf_intervals            <- confint(glm_model)
conf_intervals            <- confint(glm_model)
conf_intervals            <- confint(glm_model, method = "boot")
conf_intervals
conf_intervals            <- confint.merMod(glm_model)
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"))
conf_intervals            <- confint.merMod(glm_model)
profile(glm_model, devtol = 1e-07)
profile(glm_model, devtol = 1e-4)
profile(glm_model, devtol = 1e-10)
profile(glm_model, devtol = 1e-6)
profile(glm_model, devtol = 1e-20)
profile(glm_model, devtol = 1e-200)
profile(glm_model, devtol = 1e-200000)
profile(glm_model, devtol = 1e-200000000000000)
suppressWarnings({
ci <- confint.merMod(glm_model)
})
suppressWarnings({
ci <- confint(glm_model)
})
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"),control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 10000)))
conf_intervals            <- confint.merMod(glm_model)
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"))
conf_intervals            <- confint.merMod(glm_model, method = "profile")
library(bootMer)
install.packagesI("bootMer")
install.packages("bootMer")
library(bootMer)
install.packages("arm")
library(arm)
ci <- sim(glm_model, n.sims = 1000)
ci <- bootMer(glm_model, FUN = confint)
ci <- sim(glm_model, n.sims = 1000)
ci
ci <- confint(glm_model, nsim = 2000)
conf_intervals            <- confint.merMod(null_model, method = "profile")
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"),
control = glmerControl(optimizer = "L-BFGS-B", optCtrl = list(maxfun = 10000)))
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"),
control = glmerControl(optimizer = "bobyqa")))
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"),
control = glmerControl(optimizer = "bobyqa"))
conf_intervals            <- confint.merMod(glm_model)
# Fit the GLMM model
glm_model <- glmer(sirs ~ hr_scaled + sao2_scaled + rr_scaled + map_scaled + temperature_scaled + (1|id), data = raw, family = binomial(link = "logit"),
control = glmerControl(optimizer = "Nelder_Mead"))
conf_intervals            <- confint.merMod(glm_model)
conf_intervals            <- confint.merMod(glm_model)
conf_intervals
odds_ratio_intervals <- exp(conf_intervals)
odds_ratio_intervals
conf_intervals            <- confint(glm_model)
conf_intervals
